{"version":3,"sources":["ng://ngx-bootstrap/tabs/ng-transclude.directive.ts","ng://ngx-bootstrap/tabs/tabset.config.ts","ng://ngx-bootstrap/tabs/tabset.component.ts","ng://ngx-bootstrap/tabs/tab.directive.ts","ng://ngx-bootstrap/tabs/tab-heading.directive.ts","ng://ngx-bootstrap/tabs/tabs.module.ts"],"names":["NgTranscludeDirective","viewRef","this","Object","defineProperty","prototype","_ngTransclude","templateRef","createEmbeddedView","Directive","args","selector","ViewContainerRef","Input","TabsetConfig","type","Injectable","TabsetComponent","config","renderer","clazz","tabs","classMap","assign","_vertical","value","setClassMap","_justified","_type","ngOnDestroy","isDestroyed","addTab","tab","push","active","length","removeTab","options","reselect","emit","index","indexOf","hasAvailableTabs","newActiveIndex","getClosestTabIndex","removed","splice","elementRef","nativeElement","parentNode","removeChild","tabsLength","step","prevIndex","nextIndex","disabled","i","_a","nav-stacked","vertical","flex-column","nav-justified","justified","Component","template","Renderer2","HostBinding","TabDirective","tabset","selectTab","EventEmitter","deselect","addClass","_customClass","customClass","_this","split","forEach","cssClass","removeClass","trim","_active","ngOnInit","removable","ElementRef","Output","TabHeadingDirective","headingRef","TemplateRef","TabsModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[ngTransclude]'\n})\nexport class NgTranscludeDirective {\n  viewRef: ViewContainerRef;\n\n  protected _viewRef: ViewContainerRef;\n  /* tslint:disable-next-line:no-any */\n  protected _ngTransclude: TemplateRef<any>;\n\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set ngTransclude(templateRef: TemplateRef<any>) {\n    this._ngTransclude = templateRef;\n    if (templateRef) {\n      this.viewRef.createEmbeddedView(templateRef);\n    }\n  }\n\n  /* tslint:disable-next-line:no-any */\n  get ngTransclude(): TemplateRef<any> {\n    return this._ngTransclude;\n  }\n\n  constructor(viewRef: ViewContainerRef) {\n    this.viewRef = viewRef;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TabsetConfig {\n  /** provides default navigation context class: 'tabs' or 'pills' */\n  type = 'tabs';\n}\n","import { Component, HostBinding, Input, OnDestroy, Renderer2 } from '@angular/core';\n\nimport { TabDirective } from './tab.directive';\nimport { TabsetConfig } from './tabset.config';\n// todo: add active event to tab\n// todo: fix? mixing static and dynamic tabs position tabs in order of creation\n@Component({\n  selector: 'tabset',\n  templateUrl: './tabset.component.html'\n})\nexport class TabsetComponent implements OnDestroy {\n  /** if true tabs will be placed vertically */\n  @Input()\n  get vertical(): boolean {\n    return this._vertical;\n  }\n  set vertical(value: boolean) {\n    this._vertical = value;\n    this.setClassMap();\n  }\n\n  /** if true tabs fill the container and have a consistent width */\n  @Input()\n  get justified(): boolean {\n    return this._justified;\n  }\n  set justified(value: boolean) {\n    this._justified = value;\n    this.setClassMap();\n  }\n\n  /** navigation context class: 'tabs' or 'pills' */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n  set type(value: string) {\n    this._type = value;\n    this.setClassMap();\n  }\n\n  @HostBinding('class.tab-container') clazz = true;\n\n  tabs: TabDirective[] = [];\n  classMap: { [key: string]: boolean } = {};\n\n  protected isDestroyed: boolean;\n  protected _vertical: boolean;\n  protected _justified: boolean;\n  protected _type: string;\n\n  constructor(config: TabsetConfig, private renderer: Renderer2) {\n    Object.assign(this, config);\n  }\n\n  ngOnDestroy(): void {\n    this.isDestroyed = true;\n  }\n\n  addTab(tab: TabDirective): void {\n    this.tabs.push(tab);\n    tab.active = this.tabs.length === 1 && typeof tab.active === 'undefined';\n  }\n\n  removeTab(\n    tab: TabDirective,\n    options = { reselect: true, emit: true }\n  ): void {\n    const index = this.tabs.indexOf(tab);\n    if (index === -1 || this.isDestroyed) {\n      return;\n    }\n    // Select a new tab if the tab to be removed is selected and not destroyed\n    if (options.reselect && tab.active && this.hasAvailableTabs(index)) {\n      const newActiveIndex = this.getClosestTabIndex(index);\n      this.tabs[newActiveIndex].active = true;\n    }\n    if (options.emit) {\n      tab.removed.emit(tab);\n    }\n    this.tabs.splice(index, 1);\n    if (tab.elementRef.nativeElement.parentNode) {\n      this.renderer.removeChild(\n        tab.elementRef.nativeElement.parentNode,\n        tab.elementRef.nativeElement\n      );\n    }\n  }\n\n  protected getClosestTabIndex(index: number): number {\n    const tabsLength = this.tabs.length;\n    if (!tabsLength) {\n      return -1;\n    }\n\n    for (let step = 1; step <= tabsLength; step += 1) {\n      const prevIndex = index - step;\n      const nextIndex = index + step;\n      if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {\n        return prevIndex;\n      }\n      if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {\n        return nextIndex;\n      }\n    }\n\n    return -1;\n  }\n\n  protected hasAvailableTabs(index: number): boolean {\n    const tabsLength = this.tabs.length;\n    if (!tabsLength) {\n      return false;\n    }\n\n    for (let i = 0; i < tabsLength; i += 1) {\n      if (!this.tabs[i].disabled && i !== index) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  protected setClassMap(): void {\n    this.classMap = {\n      'nav-stacked': this.vertical,\n      'flex-column': this.vertical,\n      'nav-justified': this.justified,\n      [`nav-${this.type}`]: true\n    };\n  }\n}\n","import {\n  Directive,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  TemplateRef,\n  OnInit,\n  OnDestroy,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\nimport { TabsetComponent } from './tabset.component';\n\n@Directive({ selector: 'tab, [tab]' })\nexport class TabDirective implements OnInit, OnDestroy {\n  /** tab header text */\n  @Input() heading: string;\n  /** tab id. The same id with suffix '-link' will be added to the corresponding &lt;li&gt; element  */\n  @HostBinding('attr.id')\n  @Input() id: string;\n  /** if true tab can not be activated */\n  @Input() disabled: boolean;\n  /** if true tab can be removable, additional button will appear */\n  @Input() removable: boolean;\n  /** if set, will be added to the tab's class attribute. Multiple classes are supported. */\n  @Input()\n  get customClass(): string {\n    return this._customClass;\n  }\n\n  set customClass(customClass: string) {\n    if (this.customClass) {\n      this.customClass.split(' ').forEach((cssClass: string) => {\n        this.renderer.removeClass(this.elementRef.nativeElement, cssClass);\n      });\n    }\n\n    this._customClass = customClass ? customClass.trim() : null;\n\n    if (this.customClass) {\n      this.customClass.split(' ').forEach((cssClass: string) => {\n        this.renderer.addClass(this.elementRef.nativeElement, cssClass);\n      });\n    }\n  }\n\n  /** tab active state toggle */\n  @HostBinding('class.active')\n  @Input()\n  get active(): boolean {\n    return this._active;\n  }\n\n  set active(active: boolean) {\n    if (this._active === active) {\n      return;\n    }\n    if ((this.disabled && active) || !active) {\n      if (this._active && !active) {\n        this.deselect.emit(this);\n        this._active = active;\n      }\n\n      return;\n    }\n\n    this._active = active;\n    this.selectTab.emit(this);\n    this.tabset.tabs.forEach((tab: TabDirective) => {\n      if (tab !== this) {\n        tab.active = false;\n      }\n    });\n  }\n\n  /** fired when tab became active, $event:Tab equals to selected instance of Tab component */\n  @Output() selectTab: EventEmitter<TabDirective> = new EventEmitter();\n  /** fired when tab became inactive, $event:Tab equals to deselected instance of Tab component */\n  @Output() deselect: EventEmitter<TabDirective> = new EventEmitter();\n  /** fired before tab will be removed, $event:Tab equals to instance of removed tab */\n  @Output() removed: EventEmitter<TabDirective> = new EventEmitter();\n\n  @HostBinding('class.tab-pane') addClass = true;\n\n  /* tslint:disable-next-line:no-any */\n  headingRef: TemplateRef<any>;\n  tabset: TabsetComponent;\n  protected _active: boolean;\n  protected _customClass: string;\n\n  constructor(\n    tabset: TabsetComponent,\n    public elementRef: ElementRef,\n    public renderer: Renderer2\n  ) {\n    this.tabset = tabset;\n    this.tabset.addTab(this);\n  }\n\n  ngOnInit(): void {\n    this.removable = this.removable;\n  }\n\n  ngOnDestroy(): void {\n    this.tabset.removeTab(this, { reselect: false, emit: false });\n  }\n}\n","import { Directive, TemplateRef } from '@angular/core';\n\nimport { TabDirective } from './tab.directive';\n\n/** Should be used to mark <ng-template> element as a template for tab heading */\n@Directive({ selector: '[tabHeading]' })\nexport class TabHeadingDirective {\n  /* tslint:disable-next-line:no-any */\n  templateRef: TemplateRef<any>;\n\n  /* tslint:disable-next-line:no-any */\n  constructor(templateRef: TemplateRef<any>, tab: TabDirective) {\n    tab.headingRef = templateRef;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { NgTranscludeDirective } from './ng-transclude.directive';\nimport { TabHeadingDirective } from './tab-heading.directive';\nimport { TabDirective } from './tab.directive';\nimport { TabsetComponent } from './tabset.component';\nimport { TabsetConfig } from './tabset.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [\n    NgTranscludeDirective,\n    TabDirective,\n    TabsetComponent,\n    TabHeadingDirective\n  ],\n  exports: [\n    TabDirective,\n    TabsetComponent,\n    TabHeadingDirective,\n    NgTranscludeDirective\n  ]\n})\nexport class TabsModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TabsModule,\n      providers: [TabsetConfig]\n    };\n  }\n}\n"]}
{"version":3,"sources":["ng://ngx-bootstrap/popover/popover.config.ts","ng://ngx-bootstrap/popover/popover-container.component.ts","ng://ngx-bootstrap/popover/popover.directive.ts","ng://ngx-bootstrap/popover/popover.module.ts"],"names":["PopoverConfig","this","placement","triggers","outsideClick","Injectable","PopoverContainerComponent","config","Object","assign","defineProperty","prototype","isBs3","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[class]","[class.show]","[class.bs3]","role","style","template","Input","PopoverDirective","_config","_elementRef","_renderer","_viewContainerRef","cis","_positionService","containerClass","_isInited","_popover","createLoader","provide","useValue","onShown","onHidden","window","nativeElement","addEventListener","focus","err","isShown","value","show","hide","popover","attach","to","container","position","attachment","content","context","popoverContext","title","popoverTitle","isOpen","toggle","ngOnInit","_this","setOptions","modifiers","flip","enabled","listen","ngOnDestroy","dispose","Directive","exportAs","ElementRef","Renderer2","ViewContainerRef","ComponentLoaderFactory","PositioningService","Output","PopoverModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the Popover directive.\n * You can inject this service, typically in your root component, and customize\n * the values of its properties in order to provide default values for all the\n * popovers used in the application.\n */\n@Injectable()\nexport class PopoverConfig {\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\n   */\n  placement = 'top';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  triggers = 'click';\n\n  outsideClick = false;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  container: string;\n}\n","import { ChangeDetectionStrategy, Input, Component } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'popover-container',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line\n  host: {\n    '[class]':\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\n    '[class.show]': '!isBs3',\n    '[class.bs3]': 'isBs3',\n    role: 'tooltip',\n    style: 'display:block;'\n  },\n  styles: [\n    `\n    :host.bs3.popover-top {\n      margin-bottom: 10px;\n    }\n    :host.bs3.popover.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.popover.top {\n      margin-bottom: 10px;\n    }\n    :host.popover.bottom>.arrow {\n      margin-left: -4px;\n    }\n    :host.bs3.bs-popover-left {\n      margin-right: .5rem;\n    }\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\n      margin: .3rem 0;\n    }\n    `\n  ],\n  templateUrl: './popover-container.component.html'\n})\nexport class PopoverContainerComponent {\n  @Input() placement: string;\n  @Input() title: string;\n  containerClass: string;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  constructor(config: PopoverConfig) {\n    Object.assign(this, config);\n  }\n}\n","import {\n  Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output,\n  Renderer2, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PopoverContainerComponent } from './popover-container.component';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({selector: '[popover]', exportAs: 'bs-popover'})\nexport class PopoverDirective implements OnInit, OnDestroy {\n  /**\n   * Content to be displayed as popover.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popover: string | TemplateRef<any>;\n  /**\n   * Context to be used if popover is a template.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popoverContext: any;\n  /**\n   * Title of a popover.\n   */\n  @Input() popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto';\n  /**\n   * Close popover on outside click\n   */\n  @Input() outsideClick = false;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() container: string;\n\n  /**\n   * Css class for popover container\n   */\n  @Input() containerClass = '';\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._popover.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Emits an event when the popover is shown\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the popover is hidden\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onHidden: EventEmitter<any>;\n\n  private _popover: ComponentLoader<PopoverContainerComponent>;\n  private _isInited = false;\n\n  constructor(\n    _config: PopoverConfig,\n    _elementRef: ElementRef,\n    _renderer: Renderer2,\n    _viewContainerRef: ViewContainerRef,\n    cis: ComponentLoaderFactory,\n    private _positionService: PositioningService\n  ) {\n    this._popover = cis\n      .createLoader<PopoverContainerComponent>(\n        _elementRef,\n        _viewContainerRef,\n        _renderer\n      )\n      .provide({provide: PopoverConfig, useValue: _config});\n    Object.assign(this, _config);\n    this.onShown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n\n    // fix: no focus on button on Mac OS #1795\n    if (typeof window !== 'undefined') {\n      _elementRef.nativeElement.addEventListener('click', function () {\n        try {\n          _elementRef.nativeElement.focus();\n        } catch (err) {\n          return;\n        }\n      });\n    }\n  }\n\n  /**\n   * Opens an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  show(): void {\n    if (this._popover.isShown || !this.popover) {\n      return;\n    }\n\n    this._popover\n      .attach(PopoverContainerComponent)\n      .to(this.container)\n      .position({attachment: this.placement})\n      .show({\n        content: this.popover,\n        context: this.popoverContext,\n        placement: this.placement,\n        title: this.popoverTitle,\n        containerClass: this.containerClass\n      });\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  hide(): void {\n    if (this.isOpen) {\n      this._popover.hide();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  ngOnInit(): void {\n    // fix: seems there are an issue with `routerLinkActive`\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n    if (this._isInited) {\n      return;\n    }\n    this._isInited = true;\n\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: true\n        }\n      }\n    });\n\n    this._popover.listen({\n      triggers: this.triggers,\n      outsideClick: this.outsideClick,\n      show: () => this.show()\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._popover.dispose();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { PopoverConfig } from './popover.config';\nimport { PopoverDirective } from './popover.directive';\nimport { PopoverContainerComponent } from './popover-container.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PopoverDirective, PopoverContainerComponent],\n  exports: [PopoverDirective],\n  entryComponents: [PopoverContainerComponent]\n})\nexport class PopoverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PopoverModule,\n      providers: [PopoverConfig, ComponentLoaderFactory, PositioningService]\n    };\n  }\n}\n"]}
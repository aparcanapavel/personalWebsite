{"version":3,"file":"ngx-bootstrap-popover.umd.js.map","sources":["ng://ngx-bootstrap/popover/popover.config.ts","ng://ngx-bootstrap/popover/popover-container.component.ts","ng://ngx-bootstrap/popover/popover.directive.ts","ng://ngx-bootstrap/popover/popover.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the Popover directive.\n * You can inject this service, typically in your root component, and customize\n * the values of its properties in order to provide default values for all the\n * popovers used in the application.\n */\n@Injectable()\nexport class PopoverConfig {\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\n   */\n  placement = 'top';\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  triggers = 'click';\n\n  outsideClick = false;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  container: string;\n}\n","import { ChangeDetectionStrategy, Input, Component } from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n@Component({\n  selector: 'popover-container',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  // tslint:disable-next-line\n  host: {\n    '[class]':\n      '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\n    '[class.show]': '!isBs3',\n    '[class.bs3]': 'isBs3',\n    role: 'tooltip',\n    style: 'display:block;'\n  },\n  styles: [\n    `\n    :host.bs3.popover-top {\n      margin-bottom: 10px;\n    }\n    :host.bs3.popover.top>.arrow {\n      margin-left: -2px;\n    }\n    :host.bs3.popover.top {\n      margin-bottom: 10px;\n    }\n    :host.popover.bottom>.arrow {\n      margin-left: -4px;\n    }\n    :host.bs3.bs-popover-left {\n      margin-right: .5rem;\n    }\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\n      margin: .3rem 0;\n    }\n    `\n  ],\n  templateUrl: './popover-container.component.html'\n})\nexport class PopoverContainerComponent {\n  @Input() placement: string;\n  @Input() title: string;\n  containerClass: string;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  constructor(config: PopoverConfig) {\n    Object.assign(this, config);\n  }\n}\n","import {\n  Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output,\n  Renderer2, TemplateRef, ViewContainerRef\n} from '@angular/core';\nimport { PopoverConfig } from './popover.config';\nimport { ComponentLoader, ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PopoverContainerComponent } from './popover-container.component';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n\n/**\n * A lightweight, extensible directive for fancy popover creation.\n */\n@Directive({selector: '[popover]', exportAs: 'bs-popover'})\nexport class PopoverDirective implements OnInit, OnDestroy {\n  /**\n   * Content to be displayed as popover.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popover: string | TemplateRef<any>;\n  /**\n   * Context to be used if popover is a template.\n   */\n  /* tslint:disable-next-line: no-any */\n  @Input() popoverContext: any;\n  /**\n   * Title of a popover.\n   */\n  @Input() popoverTitle: string;\n  /**\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto';\n  /**\n   * Close popover on outside click\n   */\n  @Input() outsideClick = false;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() triggers: string;\n  /**\n   * A selector specifying the element the popover should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() container: string;\n\n  /**\n   * Css class for popover container\n   */\n  @Input() containerClass = '';\n\n  /**\n   * Returns whether or not the popover is currently being shown\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._popover.isShown;\n  }\n\n  set isOpen(value: boolean) {\n    if (value) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Emits an event when the popover is shown\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the popover is hidden\n   */\n  /* tslint:disable-next-line: no-any */\n  @Output() onHidden: EventEmitter<any>;\n\n  private _popover: ComponentLoader<PopoverContainerComponent>;\n  private _isInited = false;\n\n  constructor(\n    _config: PopoverConfig,\n    _elementRef: ElementRef,\n    _renderer: Renderer2,\n    _viewContainerRef: ViewContainerRef,\n    cis: ComponentLoaderFactory,\n    private _positionService: PositioningService\n  ) {\n    this._popover = cis\n      .createLoader<PopoverContainerComponent>(\n        _elementRef,\n        _viewContainerRef,\n        _renderer\n      )\n      .provide({provide: PopoverConfig, useValue: _config});\n    Object.assign(this, _config);\n    this.onShown = this._popover.onShown;\n    this.onHidden = this._popover.onHidden;\n\n    // fix: no focus on button on Mac OS #1795\n    if (typeof window !== 'undefined') {\n      _elementRef.nativeElement.addEventListener('click', function () {\n        try {\n          _elementRef.nativeElement.focus();\n        } catch (err) {\n          return;\n        }\n      });\n    }\n  }\n\n  /**\n   * Opens an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  show(): void {\n    if (this._popover.isShown || !this.popover) {\n      return;\n    }\n\n    this._popover\n      .attach(PopoverContainerComponent)\n      .to(this.container)\n      .position({attachment: this.placement})\n      .show({\n        content: this.popover,\n        context: this.popoverContext,\n        placement: this.placement,\n        title: this.popoverTitle,\n        containerClass: this.containerClass\n      });\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  hide(): void {\n    if (this.isOpen) {\n      this._popover.hide();\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles an elementâs popover. This is considered a âmanualâ triggering of\n   * the popover.\n   */\n  toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  ngOnInit(): void {\n    // fix: seems there are an issue with `routerLinkActive`\n    // which result in duplicated call ngOnInit without call to ngOnDestroy\n    // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n    if (this._isInited) {\n      return;\n    }\n    this._isInited = true;\n\n    this._positionService.setOptions({\n      modifiers: {\n        flip: {\n          enabled: true\n        }\n      }\n    });\n\n    this._popover.listen({\n      triggers: this.triggers,\n      outsideClick: this.outsideClick,\n      show: () => this.show()\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._popover.dispose();\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\nimport { PopoverConfig } from './popover.config';\nimport { PopoverDirective } from './popover.directive';\nimport { PopoverContainerComponent } from './popover-container.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [PopoverDirective, PopoverContainerComponent],\n  exports: [PopoverDirective],\n  entryComponents: [PopoverContainerComponent]\n})\nexport class PopoverModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PopoverModule,\n      providers: [PopoverConfig, ComponentLoaderFactory, PositioningService]\n    };\n  }\n}\n"],"names":["Injectable","isBs3","Component","ChangeDetectionStrategy","Input","Directive","ElementRef","Renderer2","ViewContainerRef","ComponentLoaderFactory","PositioningService","Output","NgModule","CommonModule"],"mappings":"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"}

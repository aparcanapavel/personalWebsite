{"version":3,"file":"ngx-bootstrap-carousel.umd.js.map","sources":["ng://ngx-bootstrap/carousel/carousel.config.ts","ng://ngx-bootstrap/carousel/carousel.component.ts","ng://ngx-bootstrap/carousel/slide.component.ts","ng://ngx-bootstrap/carousel/carousel.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CarouselConfig {\n  /** Default interval of auto changing of slides */\n  interval = 5000;\n\n  /** Is loop of auto changing of slides can be paused */\n  noPause = false;\n\n  /** Is slides can wrap from the last to the first slide */\n  noWrap = false;\n\n  /** Show carousel-indicators */\n  showIndicators = true;\n}\n","// tslint:disable:max-file-line-count\n/***\n * pause (not yet supported) (?string='hover') - event group name which pauses\n * the cycling of the carousel, if hover pauses on mouseenter and resumes on\n * mouseleave keyboard (not yet supported) (?boolean=true) - if false\n * carousel will not react to keyboard events\n * note: swiping not yet supported\n */\n/****\n * Problems:\n * 1) if we set an active slide via model changes, .active class remains on a\n * current slide.\n * 2) if we have only one slide, we shouldn't show prev/next nav buttons\n * 3) if first or last slide is active and noWrap is true, there should be\n * \"disabled\" class on the nav buttons.\n * 4) default interval should be equal 5000\n */\n\nimport {\n  Component, EventEmitter, Input, NgZone, OnDestroy, Output\n} from '@angular/core';\n\nimport { isBs3, LinkedList } from 'ngx-bootstrap/utils';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\n\nexport enum Direction {\n  UNKNOWN,\n  NEXT,\n  PREV\n}\n\n/**\n * Base element to create carousel\n */\n@Component({\n  selector: 'carousel',\n  templateUrl: './carousel.component.html'\n})\nexport class CarouselComponent implements OnDestroy {\n  /** If `true` â carousel will not cycle continuously and will have hard stops (prevent looping) */\n  @Input() noWrap: boolean;\n  /**  If `true` â will disable pausing on carousel mouse hover */\n  @Input() noPause: boolean;\n  /**  If `true` â carousel-indicators are visible  */\n  @Input() showIndicators: boolean;\n\n  /** Will be emitted when active slide has been changed. Part of two-way-bindable [(activeSlide)] property */\n  @Output()\n  activeSlideChange: EventEmitter<number> = new EventEmitter<number>(false);\n\n  /** Index of currently displayed slide(started for 0) */\n  @Input()\n  set activeSlide(index: number) {\n    if (this._slides.length && index !== this._currentActiveSlide) {\n      this._select(index);\n    }\n  }\n\n  get activeSlide(): number {\n    return this._currentActiveSlide;\n  }\n\n  /**\n   * Delay of item cycling in milliseconds. If false, carousel won't cycle\n   * automatically.\n   */\n  @Input()\n  get interval(): number {\n    return this._interval;\n  }\n\n  set interval(value: number) {\n    this._interval = value;\n    this.restartTimer();\n  }\n\n  get slides(): SlideComponent[] {\n    return this._slides.toArray();\n  }\n\n  // tslint:disable-next-line:no-any\n  protected currentInterval: any;\n  protected _currentActiveSlide: number;\n  protected _interval: number;\n  protected _slides: LinkedList<SlideComponent> = new LinkedList<SlideComponent>();\n  protected isPlaying: boolean;\n  protected destroyed = false;\n\n  get isBs4(): boolean {\n    return !isBs3();\n  }\n\n  constructor(config: CarouselConfig, private ngZone: NgZone) {\n    Object.assign(this, config);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed = true;\n  }\n\n  /**\n   * Adds new slide. If this slide is first in collection - set it as active\n   * and starts auto changing\n   * @param slide\n   */\n  addSlide(slide: SlideComponent): void {\n    this._slides.add(slide);\n    if (this._slides.length === 1) {\n      this._currentActiveSlide = void 0;\n      this.activeSlide = 0;\n      this.play();\n    }\n  }\n\n  /**\n   * Removes specified slide. If this slide is active - will roll to another\n   * slide\n   * @param slide\n   */\n  removeSlide(slide: SlideComponent): void {\n    const remIndex = this._slides.indexOf(slide);\n\n    if (this._currentActiveSlide === remIndex) {\n      // removing of active slide\n      let nextSlideIndex: number = void 0;\n      if (this._slides.length > 1) {\n        // if this slide last - will roll to first slide, if noWrap flag is\n        // FALSE or to previous, if noWrap is TRUE in case, if this slide in\n        // middle of collection, index of next slide is same to removed\n        nextSlideIndex = !this.isLast(remIndex)\n          ? remIndex\n          : this.noWrap ? remIndex - 1 : 0;\n      }\n      this._slides.remove(remIndex);\n\n      // prevents exception with changing some value after checking\n      setTimeout(() => {\n        this._select(nextSlideIndex);\n      }, 0);\n    } else {\n      this._slides.remove(remIndex);\n      const currentSlideIndex = this.getCurrentSlideIndex();\n      setTimeout(() => {\n        // after removing, need to actualize index of current active slide\n        this._currentActiveSlide = currentSlideIndex;\n        this.activeSlideChange.emit(this._currentActiveSlide);\n      }, 0);\n    }\n  }\n\n  /**\n   * Rolling to next slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  nextSlide(force = false): void {\n    this.activeSlide = this.findNextSlideIndex(Direction.NEXT, force);\n  }\n\n  /**\n   * Rolling to previous slide\n   * @param force: {boolean} if true - will ignore noWrap flag\n   */\n  previousSlide(force = false): void {\n    this.activeSlide = this.findNextSlideIndex(Direction.PREV, force);\n  }\n\n  /**\n   * Rolling to specified slide\n   * @param index: {number} index of slide, which must be shown\n   */\n  selectSlide(index: number): void {\n    this.activeSlide = index;\n  }\n\n  /**\n   * Starts a auto changing of slides\n   */\n  play(): void {\n    if (!this.isPlaying) {\n      this.isPlaying = true;\n      this.restartTimer();\n    }\n  }\n\n  /**\n   * Stops a auto changing of slides\n   */\n  pause(): void {\n    if (!this.noPause) {\n      this.isPlaying = false;\n      this.resetTimer();\n    }\n  }\n\n  /**\n   * Finds and returns index of currently displayed slide\n   */\n  getCurrentSlideIndex(): number {\n    return this._slides.findIndex((slide: SlideComponent) => slide.active);\n  }\n\n  /**\n   * Defines, whether the specified index is last in collection\n   * @param index\n   */\n  isLast(index: number): boolean {\n    return index + 1 >= this._slides.length;\n  }\n\n  /**\n   * Defines next slide index, depending of direction\n   * @param direction: Direction(UNKNOWN|PREV|NEXT)\n   * @param force: {boolean} if TRUE - will ignore noWrap flag, else will\n   *   return undefined if next slide require wrapping\n   */\n  private findNextSlideIndex(direction: Direction, force: boolean): number {\n    let nextSlideIndex = 0;\n\n    if (\n      !force &&\n      (this.isLast(this.activeSlide) &&\n        direction !== Direction.PREV &&\n        this.noWrap)\n    ) {\n      return void 0;\n    }\n\n    switch (direction) {\n      case Direction.NEXT:\n        // if this is last slide, not force, looping is disabled\n        // and need to going forward - select current slide, as a next\n        nextSlideIndex = !this.isLast(this._currentActiveSlide)\n          ? this._currentActiveSlide + 1\n          : !force && this.noWrap ? this._currentActiveSlide : 0;\n        break;\n      case Direction.PREV:\n        // if this is first slide, not force, looping is disabled\n        // and need to going backward - select current slide, as a next\n        nextSlideIndex =\n          this._currentActiveSlide > 0\n            ? this._currentActiveSlide - 1\n            : !force && this.noWrap\n            ? this._currentActiveSlide\n            : this._slides.length - 1;\n        break;\n      default:\n        throw new Error('Unknown direction');\n    }\n\n    return nextSlideIndex;\n  }\n\n  /**\n   * Sets a slide, which specified through index, as active\n   * @param index\n   */\n  private _select(index: number): void {\n    if (isNaN(index)) {\n      this.pause();\n\n      return;\n    }\n    const currentSlide = this._slides.get(this._currentActiveSlide);\n    if (currentSlide) {\n      currentSlide.active = false;\n    }\n    const nextSlide = this._slides.get(index);\n    if (nextSlide) {\n      this._currentActiveSlide = index;\n      nextSlide.active = true;\n      this.activeSlide = index;\n      this.activeSlideChange.emit(index);\n    }\n  }\n\n  /**\n   * Starts loop of auto changing of slides\n   */\n  private restartTimer() {\n    this.resetTimer();\n    const interval = +this.interval;\n    if (!isNaN(interval) && interval > 0) {\n      this.currentInterval = this.ngZone.runOutsideAngular(() => {\n        return setInterval(() => {\n          const nInterval = +this.interval;\n          this.ngZone.run(() => {\n            if (\n              this.isPlaying &&\n              !isNaN(this.interval) &&\n              nInterval > 0 &&\n              this.slides.length\n            ) {\n              this.nextSlide();\n            } else {\n              this.pause();\n            }\n          });\n        }, interval);\n      });\n    }\n  }\n\n  /**\n   * Stops loop of auto changing of slides\n   */\n  private resetTimer(): void {\n    if (this.currentInterval) {\n      clearInterval(this.currentInterval);\n      this.currentInterval = void 0;\n    }\n  }\n}\n","import {\n  Component,\n  HostBinding,\n  OnDestroy,\n  Input,\n  OnInit\n} from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\n\n@Component({\n  selector: 'slide',\n  template: `\n    <div [class.active]=\"active\" class=\"item\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  host: {\n    '[attr.aria-hidden]': '!active'\n  }\n})\nexport class SlideComponent implements OnInit, OnDestroy {\n  /** Is current slide active */\n  @HostBinding('class.active')\n  @Input()\n  active: boolean;\n\n  /** Wraps element by appropriate CSS classes */\n  @HostBinding('class.item')\n  @HostBinding('class.carousel-item')\n  addClass = true;\n\n  /** Link to Parent(container-collection) component */\n  protected carousel: CarouselComponent;\n\n  constructor(carousel: CarouselComponent) {\n    this.carousel = carousel;\n  }\n\n  /** Fires changes in container collection after adding a new slide instance */\n  ngOnInit(): void {\n    this.carousel.addSlide(this);\n  }\n\n  /** Fires changes in container collection after removing of this slide instance */\n  ngOnDestroy(): void {\n    this.carousel.removeSlide(this);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CarouselComponent } from './carousel.component';\nimport { SlideComponent } from './slide.component';\nimport { CarouselConfig } from './carousel.config';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SlideComponent, CarouselComponent],\n  exports: [SlideComponent, CarouselComponent],\n  providers: [CarouselConfig]\n})\nexport class CarouselModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: CarouselModule, providers: [] };\n  }\n}\n"],"names":["Injectable","EventEmitter","LinkedList","isBs3","Component","NgZone","Input","Output","HostBinding","NgModule","CommonModule"],"mappings":"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"}
